# What was the 2018 salary of employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary_2017 <- runif(100, min = 40000, max = 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
salary_2018 <- runif(100, min= -5000, max = 10000) + salary_2017
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary_2017, salary_2018, stringsAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries$salary_2018 - salaries$salary_2017
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
# What was the 2018 salary of employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the 2018 salary of employee 57
salary57 <- salaries[salaries$employees == "Employee 57", "salaries_2018"]
# What was the dollar value of the highest raise?
highest <- max(salaries$change)
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the 2018 salary of employee 57
salary57 <- salaries[salaries$employees == "Employee 57", "salaries_2018"]
# What was the "name" of the employee who received the highest raise?
got_biggest_raise <- salaries[salaries$change == highest_raise, "employees"]
# What was the "name" of the employee who received the highest raise?
got_biggest_raise <- salaries[salaries$change == highest, "employees"]
# What was the largest decrease in salaries between the two years?
smallest <- min(salaries$change)
# What was the name of the employee who recieved largest decrease in salary?
got_largest_paycut <- salaries[salaries$change == smallest, "employees"]
clear
setwd("~/Desktop/INFO/ch9-data-frames/exercise-3")
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame("USPersonalExpenditure")
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
data_frame <- data.frame("USPersonalExpenditure")
# What are the column names of your dataframe?
`rownames<-`(data_frame)
# What are the column names of your dataframe?
rownames<-(data_frame)
print(rownames)
# What are the column names of your dataframe?
colnames(data_frame)
# What are the row names of your dataframe?
rownames(data_frame)
view(data_frame)
setwd("~/Desktop/INFO/ch9-data-frames/exercise-3")
source('~/Desktop/INFO/ch9-data-frames/exercise-3/exercise.R', echo=TRUE)
# How much money was spent on personal care in 1940?
care_1940 <- us_exp['Personal Care', 'X1940']
# How much money was spent on personal care in 1940?
care_1940 <- data_frame['Personal Care', 'X1940']
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame("USPersonalExpenditure")
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
us_data <- data.frame("USPersonalExpenditure")
# What are the column names of your dataframe?
colnames(data_frame)
# What are the row names of your dataframe?
rownames(data_frame)
view(us_data)
View(us_data)
setwd("~/Desktop/INFO/ch9-data-frames/exercise-3")
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
us_data <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(data_frame)
# What are the column names of your dataframe?
colnames(us_data)
# What are the row names of your dataframe?
rownames(us_data)
# Add a column "category" to your data frame that contains the rownames
us_data$category <- rownames(us_data)
# How much money was spent on personal care in 1940?
personal_care_1940 <- us_exp["Personal Care", "X1940"]
# How much money was spent on personal care in 1940?
personal_care_1940 <- us_data["Personal Care", "X1940"]
# How much money was spent on Food and Tobacco in 1960?
Food_tobacco_cost <- us_data["Food and Tobacco", "X1960"]
# What was the highest expenditure category in 1960?
highest_1960 <- us_data$category[us_data$1960 <- max(us_data&1960)]
# What was the highest expenditure category in 1960?
highest_1960 <- us_data$category[us_data$1960 == max(us_data&1960)]
# What was the highest expenditure category in 1960?
highest_1960 <- us_data$category[us_data$1960 == max(us_data$1960)]
# What was the highest expenditure category in 1960?
highest_1960 <- us_data$category[us_data$X1960 == max(us_data$X1960)]
usp_data$category[us_data[, col]== min(us_data[, col])]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
col <- paste0('X', year)
us_data$category[us_data[, col]== min(us_data[, col])]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest sapply(seq(1940,1960, 5), lowest_category
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest sapply(seq(1940,1960, 5), lowest_category))
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940,1960, 5), lowest_category))
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940,1960, 5), lowest_category)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest <- sapply(seq(1940,1960, 5), lowest_category)
